# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


import json
import threading
import time
from pathlib import Path
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk

import os

from matplotlib import pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

# Lấy đường dẫn thư mục hiện tại của script Python
current_directory = os.path.dirname(os.path.abspath(__file__))

# Tạo đường dẫn đầy đủ tới file văn bản
file_path = os.path.join(current_directory, 'data.txt')

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"/home/anhnv/Documents/python_tt/tooltestBLE/build/assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


import random

import paho.mqtt.client as mqtt_client

# broker = 'broker.emqx.io'
# port = 1883
# topic = "python/mqtt"
# Generate a Client ID with the subscribe prefix.
client_id = f'subscribe-{random.randint(0, 100)}'
broker = 'localhost'
port = 1883
topic = "/tooltest/hc/app/json_req"
username ="RD"
password="1"
product_data = {
    "total": 0,
    "false_rssi": 0,
    "false_touch": 0,
    "false_load": 0,
    "false_rgb": 0,
    "false_other": 0
}

mqtt_data = {}
chart_data = {
    "value": [472, 356, 278, 412, 500],
    "type": ["RSSI", "Cảm ứng", "Tải", "RGB", "Khác"],
    "angles": [0, 1.2566370614, 2.5132741228, 3.7699111843, 5.0265482457],
    "rotation": [-72, -36, 0, 36, 72],
    "colors": ["#439A97", "#56a8a5", "#6cbdba", "#12b2ed", "#008fc4"]
}
labels = ['Hợp cách', '']
sizes = [product_data["total"], 0]

error_labels = ["RSSI", "Cảm ứng", "Tải", "RGB", "Khác"]
error_size = [0,0,0,0,0]
# Khai báo biến toàn cục cho canvas

def drawUI():
    window = Tk()

    # Loại bỏ khung cửa sổ
    window.overrideredirect(True)

    window.geometry("1920x1080")
    window.configure(bg="#2E2F4F")

    global canvas
    canvas = Canvas(
        window,
        bg="#2E2F4F",
        height=1080,
        width=1920,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )

    canvas.place(x=0, y=0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        960.0,
        65.0,
        image=image_image_1
    )

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        220.0,
        65.0,
        image=image_image_2
    )

    image_image_3 = PhotoImage(
        file=relative_to_assets("image_3.png"))
    image_3 = canvas.create_image(
        1415.0,
        370.0,
        image=image_image_3
    )

    image_image_4 = PhotoImage(
        file=relative_to_assets("image_4.png"))
    image_4 = canvas.create_image(
        1415.0,
        837.0,
        image=image_image_4
    )

    image_image_6 = PhotoImage(
        file=relative_to_assets("image_6.png"))
    image_6 = canvas.create_image(
        463.0,
        370.0,
        image=image_image_6
    )

    canvas.create_text(
        135.0,
        148.0,
        anchor="nw",
        text="Công tắc cảm ứng chữ nhật CTCU.BLE.CN.04T",
        fill="#000000",
        font=("Inter Bold", 30 * -1)
    )
    image_image_7 = PhotoImage(
        file=relative_to_assets("image_7.png"))
    image_7 = canvas.create_image(
        463.0,
        837.0,
        image=image_image_7
    )

    canvas.create_text(
        1520.0,
        10.0,
        anchor="nw",
        text="Nhân viên : Nguyễn Việt Anh",
        fill="#000000",
        font=("Inter Bold", 25 * -1, "italic")
    )

    canvas.create_text(
        1520.0,
        50.0,
        anchor="nw",
        text="Mã nhân viên : RD02393",
        fill="#000000",
        font=("Inter Bold", 25 * -1, "italic")
    )

    canvas.create_text(
        1520.0,
        90.0,
        anchor="nw",
        text="Số điện thoại : 0988768403",
        fill="#000000",
        font=("Inter Bold", 25 * -1, "italic")
    )

    canvas.create_text(
        60.0,
        696.0,
        anchor="nw",
        text="RSSI:",
        fill="#000000",
        font=("Inter Bold", 36 * -1)
    )

    global text_rssi
    text_rssi = canvas.create_text(
        164.0,
        696.0,
        anchor="nw",
        text="Thành công",
        fill="#000000",
        font=("Inter Bold", 36 * -1)
    )

    canvas.create_text(
        60.0,
        773.0,
        anchor="nw",
        text="Cảm ứng:",
        fill="#000000",
        font=("Inter Bold", 36 * -1)
    )
    global text_touch
    text_touch = canvas.create_text(
        230.0,
        773.0,
        anchor="nw",
        text="Thành công",
        fill="#000000",
        font=("Inter Bold", 36 * -1)
    )
    canvas.create_text(
        60.0,
        850.0,
        anchor="nw",
        text="Tải:",
        fill="#000000",
        font=("Inter Bold", 36 * -1)
    )
    global text_load
    text_load = canvas.create_text(
        120.0,
        850.0,
        anchor="nw",
        text="Thành công",
        fill="#000000",
        font=("Inter Bold", 36 * -1)
    )

    canvas.create_text(
        60.0,
        927.0,
        anchor="nw",
        text="RGB:",
        fill="#000000",
        font=("Inter Bold", 36 * -1)
    )
    global text_rgb
    text_rgb = canvas.create_text(
        160.0,
        927.0,
        anchor="nw",
        text="Thành công",
        fill="#000000",
        font=("Inter Bold", 36 * -1)
    )
    global text_status
    text_status = canvas.create_text(
        589.0,
        785.0,
        anchor="nw",
        text="Thành Công",
        fill="#64DA5A",
        font=("Inter Bold", 48 * -1)
    )

    text_total = canvas.create_text(
        1000.0,
        550.0,
        anchor="nw",
        text="Tổng:",
        fill="#000000",
        font=("Inter Bold", 20 * -1)
    )

    global text_total_value
    text_total_value = canvas.create_text(
        1055.0,
        550.0,
        anchor="nw",
        text="0",
        fill="#000000",
        font=("Inter Bold", 20 * -1)
    )

    text_success = canvas.create_text(
        1200.0,
        550.0,
        anchor="nw",
        text="Thành Công: ",
        fill="#000000",
        font=("Inter Bold", 20 * -1)
    )
    global text_success_value
    text_success_value = canvas.create_text(
        1315.0,
        550.0,
        anchor="nw",
        text="0",
        fill="#000000",
        font=("Inter Bold", 20 * -1)
    )

    text_fail = canvas.create_text(
        1400.0,
        550.0,
        anchor="nw",
        text="Thất bại: ",
        fill="#000000",
        font=("Inter Bold", 20 * -1)
    )
    global text_fail_value
    text_fail_value = canvas.create_text(
        1480.0,
        550.0,
        anchor="nw",
        text="0",
        fill="#000000",
        font=("Inter Bold", 20 * -1)
    )

    global table
    table_columns = ["ID", "RSSI", "Cảm ứng", "Tải", "RGB", "Trạng thái", "Time"]
    table_data = []
    table = ttk.Treeview(master=window, columns=table_columns, show="headings")

    for column in table_columns:
        table.heading(column=column, text=column)
        table.column(column=column, width=100)

    for row_data in table_data:
        table.insert(parent="", index="end", values=row_data)
    table.place(x=1000, y=170, height=370, width=850)

    global fig_2
    fig_2 = plt.figure(figsize=(4, 4), facecolor="#917FB3")
    plt.axis('equal')  # Đảm bảo tỷ lệ trục x và y là bằng nhau để vẽ hình tròn
    plt.text(0.5, 0.5, "No data available", horizontalalignment='center', verticalalignment='center', fontsize=12,
             color='black')

    canvas_3 = FigureCanvasTkAgg(figure=fig_2, master=window)
    canvas_3.draw()
    canvas_3.get_tk_widget().place(x=1020.0, y=660.0)

    global fig_3
    fig_3 = plt.figure(figsize=(4, 4), facecolor="#917FB3")
    plt.axis('equal')  # Đảm bảo tỷ lệ trục x và y là bằng nhau để vẽ hình tròn
    plt.text(0.5, 0.5, "No data available", horizontalalignment='center', verticalalignment='center', fontsize=12,
             color='black')
    canvas_4 = FigureCanvasTkAgg(figure=fig_3, master=window)
    canvas_4.draw()
    canvas_4.get_tk_widget().place(x=1400.0, y=660.0)
    # window.resizable(False, False)
    readDataStartUp()
    window.mainloop()
    


def update_pie_chart(fig, sizes):
    plt.figure(fig.number)  # Chọn biểu đồ pie theo số thứ tự của nó

    # Cập nhật dữ liệu mới cho biểu đồ pie
    plt.clf()  # Xóa dữ liệu cũ trong biểu đồ
    colors = ['green', 'red']
    explode = [0, 0]
    plt.pie(sizes, explode=explode, labels=labels, colors=colors, shadow=True, autopct='%1.1f%%')
    plt.axis('equal')

    # Vẽ lại biểu đồ pie
    plt.draw()

def update_error_pie_chart(fig3, error_size):
    total_error = 0
    for error in error_size:
        total_error += error
    if total_error!=0:
        plt.figure(fig3.number)  # Chọn biểu đồ pie theo số thứ tự của nó

        # Cập nhật dữ liệu mới cho biểu đồ pie
        plt.clf()  # Xóa dữ liệu cũ trong biểu đồ
        explode = [0, 0, 0, 0, 0, ]
        plt.pie(error_size, explode=explode, labels=error_labels, shadow=True, autopct='%1.1f%%')
        plt.axis('equal')
        # Vẽ lại biểu đồ pie
        plt.draw()
    # else:
        # plt.figure(fig3.number)  # Chọn biểu đồ pie theo số thứ tự của nó
        #
        # # Cập nhật dữ liệu mới cho biểu đồ pie
        # plt.clf()  # Xóa dữ liệu cũ trong biểu đồ
        # explode = [0, 0,0,0,0,]
        # plt.pie(error_size, explode=explode, labels=error_labels, shadow=True, autopct='%1.1f%%')
        # plt.axis('equal')
        # # Vẽ lại biểu đồ pie
        # plt.draw()
def update_table():
    # Lấy ra cột dữ liệu từ biến global mqtt_data
    id = mqtt_data.get('id', '')
    rssi = mqtt_data.get('rssi', '')
    touch = mqtt_data.get('touch', '')
    load = mqtt_data.get('load', '')
    rgb = mqtt_data.get('rgb', '')
    status = mqtt_data.get('status', '')
    time = mqtt_data.get('time', '')

    # Thêm dữ liệu mới vào bảng
    table.insert("", "end", values=(id, rssi, touch, load, rgb, status, time))

def update_chart_data(product_data):
    # Cập nhật giá trị của các loại lỗi từ product_data
    chart_data["value"][0] = product_data["false_rssi"]
    chart_data["value"][1] = product_data["false_touch"]
    chart_data["value"][2] = product_data["false_load"]
    chart_data["value"][3] = product_data["false_rgb"]
    chart_data["value"][4] = product_data["false_other"]


def update_polar_chart(fig, ax, chart_data):
    ax.clear()  # Xóa dữ liệu cũ trong biểu đồ

    # Cập nhật dữ liệu mới cho biểu đồ polar
    bars = ax.bar(x=chart_data["angles"], height=chart_data["value"], color=chart_data["colors"])
    ax.set_frame_on(False)
    ax.set_xticks([])
    ax.tick_params(labelsize=6, colors="white")
    ax.grid(alpha=0.7)
    for bar, angle, label, rotation in zip(bars, chart_data["angles"], chart_data["type"], chart_data["rotation"]):
        bar.set_height(chart_data["value"][chart_data["type"].index(label)])  # Cập nhật chiều cao của cột
        ax.text(x=angle, y=max(chart_data["value"]) + 30, s=label, rotation=rotation, ha="center", va="center",
                color="white", fontsize=10)  # Giữ nguyên nhãn của cột

    # Vẽ lại biểu đồ polar
    fig.canvas.draw()

def connect_mqtt() -> mqtt_client:
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            client.subscribe(topic)
            print("Connected to MQTT Broker!")
        else:
            print("Failed to connect, return code %d\n", rc)

    client = mqtt_client.Client(client_id)
    client.username_pw_set(username, password)
    client.on_connect = on_connect
    client.connect(broker, port)
    return client

def handleMsp(msg):
    # message = json.loads(msg)
    # id = message["data"]["addr"]
    # version = "1.2.1"
    # status = ""
    # if all(value == 0 for key, value in message.items() if key.startswith('touch') or key.startswith('load')):
    #     status = "Thành công"
    # else:
    #     status = "Thất bại"

    # row_data = [id, version, status]
    # with open(file_path, 'a') as file:
    #     file.write(','.join(map(str, row_data)) + '\n')

    message = json.loads(msg)
    # Tạo danh sách các key bắt đầu với "touch" mà có giá trị không phải là 0
    failed_touches = [key.split('touch')[1] for key, value in message["data"].items() if
                        key.startswith('touch') and value != 0]
    failed_loads = [key.split('load')[1] for key, value in message["data"].items() if
                    key.startswith('load') and value != 0]
    failed_rgbs = [key.split('rgb')[1] for key, value in message["data"].items() if
                    key.startswith('rgb') and value != 0]
    # Xác định trạng thái dựa trên danh sách các key bị lỗi
    if failed_touches:
        mqtt_data['touch'] = f"Thất bại({','.join(failed_touches)})"
    else:
        mqtt_data['touch'] = "Thành công"

    # Xác định trạng thái dựa trên danh sách các key bị lỗi
    if failed_loads:
        mqtt_data['load'] = f"Thất bại({','.join(failed_loads)})"
    else:
        mqtt_data['load'] = "Thành công"

    # Xác định trạng thái dựa trên danh sách các key bị lỗi
    if failed_rgbs:
        mqtt_data['rgb'] = f"Thất bại({','.join(failed_rgbs)})"
    else:
        mqtt_data['rgb'] = "Thành công"
    mqtt_data['id'] = message["data"]["addr"]
    mqtt_data['rssi'] = message["data"]["rssi"]
    mqtt_data['status'] = "Thành công" if (all(value == 0 for key, value in message["data"].items() if
                                                key.startswith('touch') or key.startswith('load') or key.startswith(
                                                    'rgb'))
                                            and message["data"]["rssi"] >= -60) else "Thất bại"

    false_count = 0
    receivedError = {
        "false_rssi": 0,
        "false_touch": 0,
        "false_load": 0,
        "false_rgb": 0,
        "false_other": 0
    }
    # Xác định loại lỗi từ dữ liệu MQTT và cập nhật product_data
    if message["data"]["rssi"] < -60:
        receivedError["false_rssi"] = 1
        false_count += 1

    if any(value != 0 for key, value in message["data"].items() if key.startswith('touch')):
        receivedError["false_touch"] = 1
        false_count += 1

    if any(value != 0 for key, value in message["data"].items() if key.startswith('load')):
        receivedError["false_load"] = 1
        false_count += 1

    if any(value != 0 for key, value in message["data"].items() if key.startswith('rgb')):
        receivedError["false_rgb"] = 1
        false_count += 1

    # Nếu có nhiều hơn hai loại lỗi, thêm vào false_other
    if false_count > 1:
        receivedError["false_other"] = 1
        receivedError["false_rssi"] = 0
        receivedError["false_touch"] = 0
        receivedError["false_load"] = 0
        receivedError["false_rgb"] = 0

    product_data["false_other"] = product_data["false_other"] + receivedError["false_other"]
    product_data["false_rssi"] = product_data["false_rssi"] + receivedError["false_rssi"]
    product_data["false_touch"] = product_data["false_touch"] + receivedError["false_touch"]
    product_data["false_load"] = product_data["false_load"] + receivedError["false_load"]
    product_data["false_rgb"] = product_data["false_rgb"] + receivedError["false_rgb"]
    product_data["total"] += 1  # Tăng tổng số lần kiểm tra
    sizes[1] = (
        product_data["false_rssi"] + product_data["false_touch"] + product_data["false_load"] + product_data[
    "false_rgb"] + product_data["false_other"])

    sizes[0] = product_data["total"] - sizes[1]
    # In ra product_data để kiểm tra
    print(product_data)
    print(sizes)
    update_pie_chart(fig=fig_2, sizes=sizes)
    update_error_pie_chart(fig3=fig_3, error_size = [product_data["false_rssi"],product_data["false_touch"],product_data["false_load"],product_data["false_rgb"], product_data["false_other"]])
    update_chart_data(product_data)
    # update_polar_chart(fig=fig, ax=ax, chart_data=chart_data)
    mqtt_data['time'] = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())  # Thời gian nhận bản tin MQTT

    # Cập nhật bảng
    update_table()
    canvas.itemconfig(text_touch, text=mqtt_data['touch'],
                        fill="#64DA5A" if "Thành công" in mqtt_data['touch'] else "#fc2c03")
    canvas.itemconfig(text_rgb, text=mqtt_data['rgb'],
                        fill="#64DA5A" if "Thành công" in mqtt_data['rgb'] else "#fc2c03")
    canvas.itemconfig(text_rssi, text=str(mqtt_data['rssi']),
                        fill="#64DA5A" if mqtt_data['rssi'] >= -60 else "#fc2c03")
    canvas.itemconfig(text_load, text=mqtt_data['load'],
                        fill="#64DA5A" if "Thành công" in mqtt_data['load'] else "#fc2c03")
    canvas.itemconfig(text_status, text=mqtt_data['status'],
                        fill="#64DA5A" if "Thành công" in mqtt_data['status'] else "#fc2c03")
    canvas.itemconfig(text_total_value, text=product_data["total"])
    canvas.itemconfig(text_fail_value, text=sizes[1])
    canvas.itemconfig(text_success_value, text=sizes[0])   

def subscribe(client: mqtt_client):
    def on_message(client, userdata, msg):
        print(f"Received `{msg.payload.decode()}` from `{msg.topic}` topic")
        
        # Save the values to a text file
        with open(file_path, 'a') as file:
            file.write(msg.payload.decode() + '\n')
        handleMsp(msg.payload)

    client.subscribe(topic)
    client.on_message = on_message

def run():
    client = connect_mqtt()
    subscribe(client)
    client.loop_forever()

def readDataStartUp():
    if os.path.exists(file_path):
        print("Messages stored in file:")
        with open(file_path, "r") as file:
            for line in file:
                print(line.strip())
                handleMsp(str(line.strip()))
    else:
        print("No stored messages found.")

if __name__ == '__main__':
    # Tạo hai luồng riêng biệt để chạy GUI và MQTT client
    gui_thread = threading.Thread(target=drawUI)
    print("tp1")
    mqtt_thread = threading.Thread(target=run)
    print("tp2")
    gui_thread.daemon = True
    print("tp3")
    mqtt_thread.daemon = True
    print("tp4")

    # Khởi động cả hai luồng
    gui_thread.start()
    print("tp5")
    mqtt_thread.start()
    print("tp6")

    # Chờ cả hai luồng hoàn thành
    # gui_thread.join()
    # mqtt_thread.join()
    while True:
        time.sleep(10)
